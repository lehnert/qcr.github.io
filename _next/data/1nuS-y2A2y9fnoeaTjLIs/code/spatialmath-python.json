{"pageProps":{"codeData":"{\"content\":\"<h1>Spatial Maths for Python</h1>\\n<p><a href=\\\"https://badge.fury.io/py/spatialmath-python\\\"><img src=\\\"https://badge.fury.io/py/spatialmath-python.svg\\\" alt=\\\"PyPI version\\\"></a>\\n<img src=\\\"https://img.shields.io/pypi/pyversions/roboticstoolbox-python.svg\\\" alt=\\\"PyPI - Python Version\\\">\\n<a href=\\\"https://opensource.org/licenses/MIT\\\"><img src=\\\"https://img.shields.io/badge/License-MIT-yellow.svg\\\" alt=\\\"License: MIT\\\"></a>\\n<a href=\\\"https://qcr.github.io\\\"><img src=https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg alt=\\\"QUT Centre for Robotics Open Source\\\"></a></p>\\n<p><a href=https://github.com/petercorke/spatialmath-python/actions?query=workflow%3Abuild><img src=https://github.com/petercorke/spatialmath-python/workflows/build/badge.svg?branch=master alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://codecov.io/gh/petercorke/spatialmath-python\\\"><img src=\\\"https://codecov.io/gh/petercorke/spatialmath-python/branch/master/graph/badge.svg\\\" alt=\\\"Coverage\\\"></a>\\n<a href=\\\"https://lgtm.com/projects/g/petercorke/spatialmath-python/context:python\\\"><img src=\\\"https://img.shields.io/lgtm/grade/python/g/petercorke/spatialmath-python.svg?logo=lgtm&amp;logoWidth=18\\\" alt=\\\"Language grade: Python\\\"></a>\\n<a href=\\\"https://pypistats.org/packages/spatialmath-python\\\"><img src=\\\"https://img.shields.io/pypi/dw/spatialmath-python\\\" alt=\\\"PyPI - Downloads\\\"></a>\\n<a href=https://GitHub.com/petercorke/spatialmath-python/stargazers/><img src=\\\"https://img.shields.io/github/stars/petercorke/spatialmath-python.svg?style=social&amp;label=Star\\\" alt=\\\"GitHub stars\\\"></a></p>\\n<table style=\\\"border:0px\\\">\\n<tr style=\\\"border:0px\\\">\\n<td style=\\\"border:0px\\\">\\n<img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/CartesianSnakes_LogoW.png width=\\\"200\\\"></td>\\n<td style=\\\"border:0px\\\">\\nA Python implementation of the <a href=\\\"https://github.com/petercorke/spatial-math\\\">Spatial Math Toolbox for MATLAB<sup>&reg;</sup></a>\\n<ul>\\n<li><a href=\\\"https://github.com/petercorke/spatialmath-python\\\">GitHub repository </a></li>\\n<li><a href=\\\"https://petercorke.github.io/spatialmath-python\\\">Documentation</a></li>\\n<li><a href=\\\"https://github.com/petercorke/spatialmath-python/wiki\\\">Examples and details</a></li>\\n<li><a href=\\\"installation#\\\">Installation</a></li>\\n</ul>\\n</td>\\n</tr>\\n</table>\\n<p>Spatial mathematics capability underpins all of robotics and robotic vision where we need to describe the position, orientation or pose of objects in 2D or 3D spaces.</p>\\n<h1>What it does</h1>\\n<p>The package provides classes to represent pose and orientation in 3D and 2D\\nspace:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Represents</th>\\n<th>in 3D</th>\\n<th>in 2D</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pose</td>\\n<td><code class=\\\"language-none\\\">SE3</code> <code class=\\\"language-none\\\">Twist3</code> <code class=\\\"language-none\\\">UnitDualQuaternion</code></td>\\n<td><code class=\\\"language-none\\\">SE2</code> <code class=\\\"language-none\\\">Twist2</code></td>\\n</tr>\\n<tr>\\n<td>orientation</td>\\n<td><code class=\\\"language-none\\\">SO3</code> <code class=\\\"language-none\\\">UnitQuaternion</code></td>\\n<td><code class=\\\"language-none\\\">SO2</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>More specifically:</p>\\n<ul>\\n<li><code class=\\\"language-none\\\">SE3</code> matrices belonging to the group SE(3) for position and orientation (pose) in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">SO3</code> matrices belonging to the group SO(3) for orientation in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">UnitQuaternion</code> belonging to the group S3 for orientation in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">Twist3</code> vectors belonging to the group se(3) for pose in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">UnitDualQuaternion</code> maps to the group SE(3) for position and orientation (pose) in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">SE2</code> matrices belonging to the group SE(2) for position and orientation (pose) in 2-dimensions</li>\\n<li><code class=\\\"language-none\\\">SO2</code> matrices belonging to the group SO(2) for orientation in 2-dimensions</li>\\n<li><code class=\\\"language-none\\\">Twist2</code> vectors belonging to the group se(2) for pose in 2-dimensions</li>\\n</ul>\\n<p>These classes provide convenience and type safety, as well as methods and overloaded operators to support:</p>\\n<ul>\\n<li>composition, using the <code class=\\\"language-none\\\">*</code> operator</li>\\n<li>point transformation, using the <code class=\\\"language-none\\\">*</code> operator</li>\\n<li>exponent, using the <code class=\\\"language-none\\\">**</code> operator</li>\\n<li>normalization</li>\\n<li>inversion</li>\\n<li>connection to the Lie algebra via matrix exponential and logarithm operations</li>\\n<li>conversion of orientation to/from Euler angles, roll-pitch-yaw angles and angle-axis forms.</li>\\n<li>list operations such as append, insert and get</li>\\n</ul>\\n<p>These are layered over a set of base functions that perform many of the same operations but represent data explicitly in terms of <code class=\\\"language-none\\\">numpy</code> arrays.</p>\\n<p>The class, method and functions names largely mirror those of the MATLAB toolboxes, and the semantics are quite similar.</p>\\n<p><img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/fig1.png alt=\\\"trplot\\\"></p>\\n<p><video autoplay loop poster=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.jpg\\\"><source src=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.webm\\\" type=\\\"video/webm\\\"/></video></p>\\n<h1>Installation</h1>\\n<h2>Using pip</h2>\\n<p>Install a snapshot from PyPI</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">pip install spatialmath-python\\n</code></pre>\\n<h2>From GitHub</h2>\\n<p>Install the current code base from GitHub and pip install a link to that cloned copy</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">git clone https://github.com/petercorke/spatialmath-python.git\\ncd spatialmath-python\\npip install -e .\\n</code></pre>\\n<h2>Dependencies</h2>\\n<p><code class=\\\"language-none\\\">numpy</code>, <code class=\\\"language-none\\\">scipy</code>, <code class=\\\"language-none\\\">matplotlib</code>, <code class=\\\"language-none\\\">ffmpeg</code> (if rendering animations as a movie)</p>\\n<h1>Examples</h1>\\n<h2>High-level classes</h2>\\n<p>These classes abstract the low-level numpy arrays into objects that obey the rules associated with the mathematical groups SO(2), SE(2), SO(3), SE(3) as well as twists and quaternions.</p>\\n<p>Using classes ensures type safety, for example it stops us mixing a 2D homogeneous transformation with a 3D rotation matrix -- both of which are 3x3 matrices.  It also ensures that the internal matrix representation is always a valid member of the relevant group.</p>\\n<p>For example, to create an object representing a rotation of 0.3 radians about the x-axis is simply</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R1 <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R1\\n   <span class=\\\"token number\\\">1</span>         <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.955336</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.29552</span>    \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.29552</span>   <span class=\\\"token number\\\">0.955336</span>         \\n</code></pre>\\n<p>while a rotation of 30 deg about the z-axis is</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R2 <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Rz<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'deg'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R2\\n   <span class=\\\"token number\\\">0.866025</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span>       <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0.5</span>       <span class=\\\"token number\\\">0.866025</span>  <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">1</span>    \\n</code></pre>\\n<p>and the composition of these two rotations is</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> R1 <span class=\\\"token operator\\\">*</span> R2\\n   <span class=\\\"token number\\\">0.866025</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span>       <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0.433013</span>  <span class=\\\"token number\\\">0.75</span>     <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span>        \\n   <span class=\\\"token number\\\">0.25</span>      <span class=\\\"token number\\\">0.433013</span>  <span class=\\\"token number\\\">0.866025</span> \\n</code></pre>\\n<p>We can find the corresponding Euler angles (in radians)</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span> R<span class=\\\"token punctuation\\\">.</span>eul<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.57079633</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0.52359878</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">2.0943951</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p>Frequently in robotics we want a sequence, a trajectory, of rotation matrices or poses. These pose classes inherit capability from the <code class=\\\"language-none\\\">list</code> class</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\"># the identity</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>R1<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>R2<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n   <span class=\\\"token number\\\">1</span>         <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.955336</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.29552</span>    \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.29552</span>   <span class=\\\"token number\\\">0.955336</span>             \\n</code></pre>\\n<p>and this can be used in <code class=\\\"language-none\\\">for</code> loops and list comprehensions.</p>\\n<p>An alternative way of constructing this would be (<code class=\\\"language-none\\\">R1</code>, <code class=\\\"language-none\\\">R2</code> defined above)</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">[</span> SO3<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> R1<span class=\\\"token punctuation\\\">,</span> R2 <span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">)</span>       \\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">3</span>\\n</code></pre>\\n<p>Many of the constructors such as <code class=\\\"language-none\\\">.Rx</code>, <code class=\\\"language-none\\\">.Ry</code> and <code class=\\\"language-none\\\">.Rz</code> support vectorization</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span> np<span class=\\\"token punctuation\\\">.</span>arange<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span>np<span class=\\\"token punctuation\\\">.</span>pi<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>which has created, in a single line, a list of rotation matrices.</p>\\n<p>Vectorization also applies to the operators, for instance</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> A <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> SO3<span class=\\\"token punctuation\\\">.</span>Ry<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>will produce a result where each element is the product of each element of the left-hand side with the right-hand side, ie. <code class=\\\"language-none\\\">R[i] * SO3.Ry(0.5)</code>.</p>\\n<p>Similarly</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> A <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Ry<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> R \\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>will produce a result where each element is the product of the left-hand side with each element of the right-hand side , ie. <code class=\\\"language-none\\\">SO3.Ry(0.5) * R[i] </code>.</p>\\n<p>Finally</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> A <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> R \\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>will produce a result where each element is the product of each element of the left-hand side with each element of the right-hand side , ie. <code class=\\\"language-none\\\">R[i] * R[i] </code>.</p>\\n<p>The underlying representation of these classes is a numpy matrix, but the class ensures that the structure of that matrix is valid for the particular group represented: SO(2), SE(2), SO(3), SE(3).  Any operation that is not valid for the group will return a matrix rather than a pose class, for example</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span>\\narray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">1.91067298</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.59104041</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0.59104041</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">1.91067298</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\narray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.04466351</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.29552021</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.70447979</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.04466351</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p>We can print and plot these objects as well</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; T = SE3(1,2,3) * SE3.Rx(30, 'deg')\\n&gt;&gt;&gt; T.print()\\n   1         0         0         1          \\n   0         0.866025 -0.5       2          \\n   0         0.5       0.866025  3          \\n   0         0         0         1          \\n\\n&gt;&gt;&gt; T.printline()\\nt =        1,        2,        3; rpy/zyx =       30,        0,        0 deg\\n\\n&gt;&gt;&gt; T.plot()\\n</code></pre>\\n<p><img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/fig1.png alt=\\\"trplot\\\"></p>\\n<p><code class=\\\"language-none\\\">printline</code> is a compact single line format for tabular listing, whereas <code class=\\\"language-none\\\">print</code> shows the underlying matrix and for consoles that support it, it is colorised, with rotational elements in red and translational elements in blue.</p>\\n<p>For more detail checkout the shipped Python notebooks:</p>\\n<ul>\\n<li><a href=https://github.com/petercorke/spatialmath-python/blob/master/spatialmath/gentle-introduction.ipynb>gentle introduction</a></li>\\n<li><a href=https://github.com/petercorke/spatialmath-python/blob/master/spatialmath/introduction.ipynb>deeper introduction</a></li>\\n</ul>\\n<p>You can browse it statically through the links above, or clone the toolbox and run them interactively using <a href=\\\"https://jupyter.org\\\">Jupyter</a> or <a href=\\\"https://jupyter.org\\\">JupyterLab</a>.</p>\\n<h2>Low-level spatial math</h2>\\n<p>Import the low-level transform functions</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; import spatialmath.base as tr\\n</code></pre>\\n<p>We can create a 3D rotation matrix</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; tr.rotx(0.3)\\narray([[ 1.        ,  0.        ,  0.        ],\\n       [ 0.        ,  0.95533649, -0.29552021],\\n       [ 0.        ,  0.29552021,  0.95533649]])\\n\\n&gt;&gt;&gt; tr.rotx(30, unit='deg')\\narray([[ 1.       ,  0.       ,  0.       ],\\n       [ 0.       ,  0.8660254, -0.5      ],\\n       [ 0.       ,  0.5      ,  0.8660254]])\\n</code></pre>\\n<p>The results are <code class=\\\"language-none\\\">numpy</code> arrays so to perform matrix multiplication you need to use the <code class=\\\"language-none\\\">@</code> operator, for example</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">rotx(0.3) @ roty(0.2)\\n</code></pre>\\n<p>We also support multiple ways of passing vector information to functions that require it:</p>\\n<ul>\\n<li>as separate positional arguments</li>\\n</ul>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">transl2(1, 2)\\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n</code></pre>\\n<ul>\\n<li>as a list or a tuple</li>\\n</ul>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">transl2( [1,2] )\\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n\\ntransl2( (1,2) )\\nOut[444]: \\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n</code></pre>\\n<ul>\\n<li>or as a <code class=\\\"language-none\\\">numpy</code> array</li>\\n</ul>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">transl2( np.array([1,2]) )\\nOut[445]: \\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n</code></pre>\\n<p>There is a single module that deals with quaternions, unit or not, and the representation is a <code class=\\\"language-none\\\">numpy</code> array of four elements.  As above, functions can accept the <code class=\\\"language-none\\\">numpy</code> array, a list, dict or <code class=\\\"language-none\\\">numpy</code> row or column vectors.</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; from spatialmath.base.quaternion import *\\n&gt;&gt;&gt; q = qqmul([1,2,3,4], [5,6,7,8])\\n&gt;&gt;&gt; q\\narray([-60,  12,  30,  24])\\n&gt;&gt;&gt; qprint(q)\\n-60.000000 &lt; 12.000000, 30.000000, 24.000000 &gt;\\n&gt;&gt;&gt; qnorm(q)\\n72.24956747275377\\n</code></pre>\\n<h2>Graphics</h2>\\n<p><img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/transforms3d.png alt=\\\"trplot\\\"></p>\\n<p>The functions support various plotting styles</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">trplot( transl(1,2,3), frame='A', rviz=True, width=1, dims=[0, 10, 0, 10, 0, 10])\\ntrplot( transl(3,1, 2), color='red', width=3, frame='B')\\ntrplot( transl(4, 3, 1)@trotx(math.pi/3), color='green', frame='c', dims=[0,4,0,4,0,4])\\n</code></pre>\\n<p>Animation is straightforward</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">tranimate(transl(4, 3, 4)@trotx(2)@troty(-2), frame=' arrow=False, dims=[0, 5], nframes=200)\\n</code></pre>\\n<p>and it can be saved to a file by</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">tranimate(transl(4, 3, 4)@trotx(2)@troty(-2), frame=' arrow=False, dims=[0, 5], nframes=200, movie='out.mp4')\\n</code></pre>\\n<p><video autoplay loop poster=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.jpg\\\"><source src=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.webm\\\" type=\\\"video/webm\\\"/></video></p>\\n<p>At the moment we can only save as an MP4, but the following incantation will covert that to an animated GIF for embedding in web pages</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">ffmpeg -i out -r 20 -vf &quot;fps=10,scale=640:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&quot; out.gif\\n</code></pre>\\n<h2>Symbolic support</h2>\\n<p>Some functions have support for symbolic variables, for example</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">import sympy\\n\\ntheta = sym.symbols('theta')\\nprint(rotx(theta))\\n[[1 0 0]\\n [0 cos(theta) -sin(theta)]\\n [0 sin(theta) cos(theta)]]\\n</code></pre>\\n<p>The resulting <code class=\\\"language-none\\\">numpy</code> array is an array of symbolic objects not numbers – the constants are also symbolic objects.  You can read the elements of the matrix</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">a = T[0,0]\\n\\na\\nOut[258]: 1\\n\\ntype(a)\\nOut[259]: int\\n\\na = T[1,1]\\na\\nOut[256]: \\ncos(theta)\\ntype(a)\\nOut[255]: cos\\n</code></pre>\\n<p>We see that the symbolic constants are converted back to Python numeric types on read.</p>\\n<p>Similarly when we assign an element or slice of the symbolic matrix to a numeric value, they are converted to symbolic constants on the way in.</p>\\n\",\"name\":\"Spatialmath Python\",\"type\":\"code\",\"url\":\"https://github.com/petercorke/spatialmath-python\",\"image\":\"/_next/static/images/CartesianSnakes_LogoW-292d336acf7d3ffebbf1da8f9f6ccc9d.png\",\"image_fit\":\"contain\",\"src\":\"/content/robotics_toolbox/spatialmath-python.md\",\"id\":\"spatialmath-python\",\"image_position\":\"center\"}"},"__N_SSG":true}