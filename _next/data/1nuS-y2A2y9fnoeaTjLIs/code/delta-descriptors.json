{"pageProps":{"codeData":"{\"content\":\"<h1>Delta Descriptors</h1>\\n<p>Source code for the paper - &quot;Delta Descriptors: Change-Based Place Representation for Robust Visual Localization&quot;, published in IEEE Robotics and Automation Letters (RA-L) 2020 and to be presented at IROS 2020. [<a href=\\\"https://arxiv.org/abs/2006.05700\\\">arXiv</a>] [<a href=\\\"https://ieeexplore.ieee.org/document/9128035\\\">IEEE Xplore</a>][<a href=\\\"https://www.youtube.com/watch?v=qY4VobAoLPY\\\">YouTube</a>]</p>\\n<p>We propose Delta Descriptor, defined as a high-dimensional signed vector of change measured across the places observed along a route. Using a difference-based description, places can be effectively recognized despite significant appearance variations.\\n<img src=\\\"/_next/static/images/ral-iros-2020-delta-descriptors-schematic-f941eee94161c1b37bce3429b2adadc3.png\\\" alt=\\\"Schematic of the proposed approach\\\" title=\\\"Schematic of the proposed approach - Delta Descriptors\\\">\\nImages on the left are from the <a href=\\\"https://robotcar-dataset.robots.ox.ac.uk/\\\">Oxford Robotcar</a> dataset.</p>\\n<h2>Requirements</h2>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">matplotlib==2.0.2\\nnumpy==1.15.2\\ntqdm==4.29.1\\nscipy==1.1.0\\nscikit_learn==0.23.1\\n</code></pre>\\n<p>See <code class=\\\"language-none\\\">requirements.txt</code>, generated using <code class=\\\"language-none\\\">pipreqs==0.4.10</code> and <code class=\\\"language-none\\\">python3.5.6</code></p>\\n<h2>Usage</h2>\\n<h4>Download this Repository and the Nordland dataset (part)</h4>\\n<p>The dataset used in our paper is available <a href=\\\"https://zenodo.org/record/4016653#.X1WmYM8zZCV\\\">here</a> (or use commands as below). Note that the download only comprises a small part (~1 GB) of the original Nordland videos released <a href=\\\"https://nrkbeta.no/2013/01/15/nordlandsbanen-minute-by-minute-season-by-season/\\\">here</a>. These videos were first used for visual place recognition in <a href=\\\"https://www.tu-chemnitz.de/etit/proaut/publications/openseqslam.pdf\\\">this</a> paper.</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\"><span class=\\\"token function\\\">git</span> clone https://github.com/oravus/DeltaDescriptors.git\\n<span class=\\\"token builtin class-name\\\">cd</span> DeltaDescriptors/\\n<span class=\\\"token function\\\">mkdir</span> data/\\n<span class=\\\"token builtin class-name\\\">cd</span> data/\\n<span class=\\\"token function\\\">wget</span> https://zenodo.org/record/4016653/files/nordland-part-2020.zip\\n<span class=\\\"token function\\\">unzip</span> nordland-part-2020.zip\\n</code></pre>\\n<p>The zip contains two folders: summer and winter, where each one of them comprises 1750 images which were used for experiments conducted in our paper.</p>\\n<h4>Describe and Match</h4>\\n<p>Delta Descriptors are defined on top of global image descriptors, for example, NetVLAD (<a href=https://github.com/oravus/DeltaDescriptors/tree/master/thirdparty>Update 05 Sep 2020: see our python wrapper</a>). Given such descriptors, compute Delta Descriptors and match across two traverses as below:</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python src/main.py --genDesc --genMatch -l <span class=\\\"token number\\\">16</span> -d delta -ip1 <span class=\\\"token operator\\\">&lt;</span>full_path_of_desc.npy<span class=\\\"token operator\\\">></span> -ip2 <span class=\\\"token operator\\\">&lt;</span>full_path_of_query_desc.npy<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n<p>The input descriptor data is assumed to be a 2D tensor of shape <code class=\\\"language-none\\\">[numImages,numDescDims]</code>. The computed descriptors are stored in <code class=\\\"language-none\\\">.npy</code> format and the match results are stored in <code class=\\\"language-none\\\">.npz</code> format comprising a dict of two arrays: <code class=\\\"language-none\\\">matchInds</code> (matched reference index per query image) and <code class=\\\"language-none\\\">matchDists</code> (corresponding distance value). By default, output is stored in the <code class=\\\"language-none\\\">./out</code> folder but can also be specified via <code class=\\\"language-none\\\">--outPath</code> argument. To see all the options, use:</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python src/main.py --help\\n</code></pre>\\n<p>The options <code class=\\\"language-none\\\">--genDesc</code> and <code class=\\\"language-none\\\">--genMatch</code> can be used in isolation or together, see example usage below.</p>\\n<h4>Describe only</h4>\\n<p>In order to compute only the descriptors for a single traverse, use:</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python src/main.py --genDesc -l <span class=\\\"token number\\\">16</span> -d delta -ip1 <span class=\\\"token operator\\\">&lt;</span>full_path_of_desc.npy<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n<h4>Match only</h4>\\n<p>For only computing matches, given the descriptors (Delta or some other), use:</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python src/main.py --genMatch -ip1 <span class=\\\"token operator\\\">&lt;</span>full_path_of_desc.npy<span class=\\\"token operator\\\">></span> -ip2 <span class=\\\"token operator\\\">&lt;</span>full_path_of_query_desc.npy<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n<h4>Evaluate only</h4>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python src/main.py --eval -mop <span class=\\\"token operator\\\">&lt;</span>full_path_of_match_output.npz<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n<p>or evaluate directly with <code class=\\\"language-none\\\">--genMatch</code> (and possibly <code class=\\\"language-none\\\">--genDesc</code>) flag:</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python src/main.py --eval --genMatch -ip1 <span class=\\\"token operator\\\">&lt;</span>full_path_of_desc.npy<span class=\\\"token operator\\\">></span> -ip2 <span class=\\\"token operator\\\">&lt;</span>full_path_of_query_desc.npy<span class=\\\"token operator\\\">></span>\\n</code></pre>\\n<p>Currently, only Nordland dataset-style (1-to-1 frame correspondence) evaluation is supported, GPS/INS coordinates-based evaluation, for example, for Oxford Robotcar dataset to be added soon. Evalution code can be used to generate PR curves and the code in its current form prints Precision @ 100% Recall for localization radius of 1, 5, 10 and 20 (frames).</p>\\n<h2>Citation</h2>\\n<p>If you find this code or our work useful, cite it as below:</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">@article{garg2020delta,\\n  title={Delta Descriptors: Change-Based Place Representation for Robust Visual Localization},\\n  author={Garg, Sourav and Harwood, Ben and Anand, Gaurangi and Milford, Michael},\\n  journal={IEEE Robotics and Automation Letters},\\n  year={2020},\\n  publisher={IEEE},\\n  volume={5},\\n  number={4},\\n  pages={5120-5127},  \\n}\\n</code></pre>\\n<h2>License</h2>\\n<p>The code is released under MIT License.</p>\\n<h2>Related Projects</h2>\\n<p><a href=https://github.com/oravus/CoarseHash>CoarseHash (2020)</a></p>\\n<p><a href=https://github.com/oravus/seq2single>seq2single (2019)</a></p>\\n<p><a href=https://github.com/oravus/lostX>LoST (2018)</a></p>\\n\",\"name\":\"Delta Descriptors\",\"type\":\"code\",\"url\":\"https://github.com/oravus/DeltaDescriptors\",\"src\":\"/content/visual_place_recognition/delta-descriptors.md\",\"id\":\"delta-descriptors\",\"image_position\":\"center\",\"image\":\"/_next/static/images/ral-iros-2020-delta-descriptors-schematic-f941eee94161c1b37bce3429b2adadc3.png\"}"},"__N_SSG":true}