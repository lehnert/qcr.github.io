{"pageProps":{"collectionData":"{\"content\":\"<p>Python Robotics is a collection of software packages providing robotics-specific functionality to Python. While leveraging Python's advantages of portability, ubiquity and support, and the capability of the open-source ecosystem for linear algebra (numpy, scipy), graphics (matplotlib, three.js, WebGL), interactive development (jupyter, jupyterlab, mybinder.org), and documentation (sphinx).</p>\\n<p>The collection is built on top of Spatialmath which underpins all of robotics and robotic vision where we need to describe the position, orientation or pose of objects in 2D or 3D spaces. The core of the collection is the the Robotics Toolbox for Python while Swift provides a light-weight browser-based simulation environment.</p>\\n\",\"name\":\"Python Robotics\",\"type\":\"collection\",\"url\":\"https://petercorke.github.io/robotics-toolbox-python/\",\"image\":\"/_next/static/images/RobToolBox_RoundLogoB-9563d226662903b6e404b809e72e3235.png\",\"image_fit\":\"contain\",\"id\":\"python_robotics\",\"code\":[{\"content\":\"<h1>Spatial Maths for Python</h1>\\n<p><a href=\\\"https://badge.fury.io/py/spatialmath-python\\\"><img src=\\\"https://badge.fury.io/py/spatialmath-python.svg\\\" alt=\\\"PyPI version\\\"></a>\\n<img src=\\\"https://img.shields.io/pypi/pyversions/roboticstoolbox-python.svg\\\" alt=\\\"PyPI - Python Version\\\">\\n<a href=\\\"https://opensource.org/licenses/MIT\\\"><img src=\\\"https://img.shields.io/badge/License-MIT-yellow.svg\\\" alt=\\\"License: MIT\\\"></a>\\n<a href=\\\"https://qcr.github.io\\\"><img src=https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg alt=\\\"QUT Centre for Robotics Open Source\\\"></a></p>\\n<p><a href=https://github.com/petercorke/spatialmath-python/actions?query=workflow%3Abuild><img src=https://github.com/petercorke/spatialmath-python/workflows/build/badge.svg?branch=master alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://codecov.io/gh/petercorke/spatialmath-python\\\"><img src=\\\"https://codecov.io/gh/petercorke/spatialmath-python/branch/master/graph/badge.svg\\\" alt=\\\"Coverage\\\"></a>\\n<a href=\\\"https://lgtm.com/projects/g/petercorke/spatialmath-python/context:python\\\"><img src=\\\"https://img.shields.io/lgtm/grade/python/g/petercorke/spatialmath-python.svg?logo=lgtm&amp;logoWidth=18\\\" alt=\\\"Language grade: Python\\\"></a>\\n<a href=\\\"https://pypistats.org/packages/spatialmath-python\\\"><img src=\\\"https://img.shields.io/pypi/dw/spatialmath-python\\\" alt=\\\"PyPI - Downloads\\\"></a>\\n<a href=https://GitHub.com/petercorke/spatialmath-python/stargazers/><img src=\\\"https://img.shields.io/github/stars/petercorke/spatialmath-python.svg?style=social&amp;label=Star\\\" alt=\\\"GitHub stars\\\"></a></p>\\n<table style=\\\"border:0px\\\">\\n<tr style=\\\"border:0px\\\">\\n<td style=\\\"border:0px\\\">\\n<img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/CartesianSnakes_LogoW.png width=\\\"200\\\"></td>\\n<td style=\\\"border:0px\\\">\\nA Python implementation of the <a href=\\\"https://github.com/petercorke/spatial-math\\\">Spatial Math Toolbox for MATLAB<sup>&reg;</sup></a>\\n<ul>\\n<li><a href=\\\"https://github.com/petercorke/spatialmath-python\\\">GitHub repository </a></li>\\n<li><a href=\\\"https://petercorke.github.io/spatialmath-python\\\">Documentation</a></li>\\n<li><a href=\\\"https://github.com/petercorke/spatialmath-python/wiki\\\">Examples and details</a></li>\\n<li><a href=\\\"installation#\\\">Installation</a></li>\\n</ul>\\n</td>\\n</tr>\\n</table>\\n<p>Spatial mathematics capability underpins all of robotics and robotic vision where we need to describe the position, orientation or pose of objects in 2D or 3D spaces.</p>\\n<h1>What it does</h1>\\n<p>The package provides classes to represent pose and orientation in 3D and 2D\\nspace:</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Represents</th>\\n<th>in 3D</th>\\n<th>in 2D</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pose</td>\\n<td><code class=\\\"language-none\\\">SE3</code> <code class=\\\"language-none\\\">Twist3</code> <code class=\\\"language-none\\\">UnitDualQuaternion</code></td>\\n<td><code class=\\\"language-none\\\">SE2</code> <code class=\\\"language-none\\\">Twist2</code></td>\\n</tr>\\n<tr>\\n<td>orientation</td>\\n<td><code class=\\\"language-none\\\">SO3</code> <code class=\\\"language-none\\\">UnitQuaternion</code></td>\\n<td><code class=\\\"language-none\\\">SO2</code></td>\\n</tr>\\n</tbody>\\n</table>\\n<p>More specifically:</p>\\n<ul>\\n<li><code class=\\\"language-none\\\">SE3</code> matrices belonging to the group SE(3) for position and orientation (pose) in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">SO3</code> matrices belonging to the group SO(3) for orientation in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">UnitQuaternion</code> belonging to the group S3 for orientation in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">Twist3</code> vectors belonging to the group se(3) for pose in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">UnitDualQuaternion</code> maps to the group SE(3) for position and orientation (pose) in 3-dimensions</li>\\n<li><code class=\\\"language-none\\\">SE2</code> matrices belonging to the group SE(2) for position and orientation (pose) in 2-dimensions</li>\\n<li><code class=\\\"language-none\\\">SO2</code> matrices belonging to the group SO(2) for orientation in 2-dimensions</li>\\n<li><code class=\\\"language-none\\\">Twist2</code> vectors belonging to the group se(2) for pose in 2-dimensions</li>\\n</ul>\\n<p>These classes provide convenience and type safety, as well as methods and overloaded operators to support:</p>\\n<ul>\\n<li>composition, using the <code class=\\\"language-none\\\">*</code> operator</li>\\n<li>point transformation, using the <code class=\\\"language-none\\\">*</code> operator</li>\\n<li>exponent, using the <code class=\\\"language-none\\\">**</code> operator</li>\\n<li>normalization</li>\\n<li>inversion</li>\\n<li>connection to the Lie algebra via matrix exponential and logarithm operations</li>\\n<li>conversion of orientation to/from Euler angles, roll-pitch-yaw angles and angle-axis forms.</li>\\n<li>list operations such as append, insert and get</li>\\n</ul>\\n<p>These are layered over a set of base functions that perform many of the same operations but represent data explicitly in terms of <code class=\\\"language-none\\\">numpy</code> arrays.</p>\\n<p>The class, method and functions names largely mirror those of the MATLAB toolboxes, and the semantics are quite similar.</p>\\n<p><img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/fig1.png alt=\\\"trplot\\\"></p>\\n<p><video autoplay loop poster=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.jpg\\\"><source src=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.webm\\\" type=\\\"video/webm\\\"/></video></p>\\n<h1>Installation</h1>\\n<h2>Using pip</h2>\\n<p>Install a snapshot from PyPI</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">pip install spatialmath-python\\n</code></pre>\\n<h2>From GitHub</h2>\\n<p>Install the current code base from GitHub and pip install a link to that cloned copy</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">git clone https://github.com/petercorke/spatialmath-python.git\\ncd spatialmath-python\\npip install -e .\\n</code></pre>\\n<h2>Dependencies</h2>\\n<p><code class=\\\"language-none\\\">numpy</code>, <code class=\\\"language-none\\\">scipy</code>, <code class=\\\"language-none\\\">matplotlib</code>, <code class=\\\"language-none\\\">ffmpeg</code> (if rendering animations as a movie)</p>\\n<h1>Examples</h1>\\n<h2>High-level classes</h2>\\n<p>These classes abstract the low-level numpy arrays into objects that obey the rules associated with the mathematical groups SO(2), SE(2), SO(3), SE(3) as well as twists and quaternions.</p>\\n<p>Using classes ensures type safety, for example it stops us mixing a 2D homogeneous transformation with a 3D rotation matrix -- both of which are 3x3 matrices.  It also ensures that the internal matrix representation is always a valid member of the relevant group.</p>\\n<p>For example, to create an object representing a rotation of 0.3 radians about the x-axis is simply</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R1 <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R1\\n   <span class=\\\"token number\\\">1</span>         <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.955336</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.29552</span>    \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.29552</span>   <span class=\\\"token number\\\">0.955336</span>         \\n</code></pre>\\n<p>while a rotation of 30 deg about the z-axis is</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R2 <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Rz<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">30</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'deg'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R2\\n   <span class=\\\"token number\\\">0.866025</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span>       <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0.5</span>       <span class=\\\"token number\\\">0.866025</span>  <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">1</span>    \\n</code></pre>\\n<p>and the composition of these two rotations is</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> R1 <span class=\\\"token operator\\\">*</span> R2\\n   <span class=\\\"token number\\\">0.866025</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span>       <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0.433013</span>  <span class=\\\"token number\\\">0.75</span>     <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.5</span>        \\n   <span class=\\\"token number\\\">0.25</span>      <span class=\\\"token number\\\">0.433013</span>  <span class=\\\"token number\\\">0.866025</span> \\n</code></pre>\\n<p>We can find the corresponding Euler angles (in radians)</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span> R<span class=\\\"token punctuation\\\">.</span>eul<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\narray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.57079633</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0.52359878</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">2.0943951</span> <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p>Frequently in robotics we want a sequence, a trajectory, of rotation matrices or poses. These pose classes inherit capability from the <code class=\\\"language-none\\\">list</code> class</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>   <span class=\\\"token comment\\\"># the identity</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>R1<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R<span class=\\\"token punctuation\\\">.</span>append<span class=\\\"token punctuation\\\">(</span>R2<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">3</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\n   <span class=\\\"token number\\\">1</span>         <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0</span>          \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.955336</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.29552</span>    \\n   <span class=\\\"token number\\\">0</span>         <span class=\\\"token number\\\">0.29552</span>   <span class=\\\"token number\\\">0.955336</span>             \\n</code></pre>\\n<p>and this can be used in <code class=\\\"language-none\\\">for</code> loops and list comprehensions.</p>\\n<p>An alternative way of constructing this would be (<code class=\\\"language-none\\\">R1</code>, <code class=\\\"language-none\\\">R2</code> defined above)</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">[</span> SO3<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> R1<span class=\\\"token punctuation\\\">,</span> R2 <span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">)</span>       \\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">3</span>\\n</code></pre>\\n<p>Many of the constructors such as <code class=\\\"language-none\\\">.Rx</code>, <code class=\\\"language-none\\\">.Ry</code> and <code class=\\\"language-none\\\">.Rz</code> support vectorization</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> R <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span> np<span class=\\\"token punctuation\\\">.</span>arange<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token operator\\\">*</span>np<span class=\\\"token punctuation\\\">.</span>pi<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>which has created, in a single line, a list of rotation matrices.</p>\\n<p>Vectorization also applies to the operators, for instance</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> A <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> SO3<span class=\\\"token punctuation\\\">.</span>Ry<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>will produce a result where each element is the product of each element of the left-hand side with the right-hand side, ie. <code class=\\\"language-none\\\">R[i] * SO3.Ry(0.5)</code>.</p>\\n<p>Similarly</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> A <span class=\\\"token operator\\\">=</span> SO3<span class=\\\"token punctuation\\\">.</span>Ry<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> R \\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>will produce a result where each element is the product of the left-hand side with each element of the right-hand side , ie. <code class=\\\"language-none\\\">SO3.Ry(0.5) * R[i] </code>.</p>\\n<p>Finally</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> A <span class=\\\"token operator\\\">=</span> R <span class=\\\"token operator\\\">*</span> R \\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> <span class=\\\"token builtin\\\">len</span><span class=\\\"token punctuation\\\">(</span>R<span class=\\\"token punctuation\\\">)</span>\\n <span class=\\\"token number\\\">32</span>\\n</code></pre>\\n<p>will produce a result where each element is the product of each element of the left-hand side with each element of the right-hand side , ie. <code class=\\\"language-none\\\">R[i] * R[i] </code>.</p>\\n<p>The underlying representation of these classes is a numpy matrix, but the class ensures that the structure of that matrix is valid for the particular group represented: SO(2), SE(2), SO(3), SE(3).  Any operation that is not valid for the group will return a matrix rather than a pose class, for example</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span>\\narray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">1.91067298</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.59104041</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">0.59104041</span><span class=\\\"token punctuation\\\">,</span>  <span class=\\\"token number\\\">1.91067298</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">>></span><span class=\\\"token operator\\\">></span> SO3<span class=\\\"token punctuation\\\">.</span>Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span>\\narray<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.04466351</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.29552021</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n       <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">.</span>        <span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.70447979</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.04466351</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p>We can print and plot these objects as well</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; T = SE3(1,2,3) * SE3.Rx(30, 'deg')\\n&gt;&gt;&gt; T.print()\\n   1         0         0         1          \\n   0         0.866025 -0.5       2          \\n   0         0.5       0.866025  3          \\n   0         0         0         1          \\n\\n&gt;&gt;&gt; T.printline()\\nt =        1,        2,        3; rpy/zyx =       30,        0,        0 deg\\n\\n&gt;&gt;&gt; T.plot()\\n</code></pre>\\n<p><img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/fig1.png alt=\\\"trplot\\\"></p>\\n<p><code class=\\\"language-none\\\">printline</code> is a compact single line format for tabular listing, whereas <code class=\\\"language-none\\\">print</code> shows the underlying matrix and for consoles that support it, it is colorised, with rotational elements in red and translational elements in blue.</p>\\n<p>For more detail checkout the shipped Python notebooks:</p>\\n<ul>\\n<li><a href=https://github.com/petercorke/spatialmath-python/blob/master/spatialmath/gentle-introduction.ipynb>gentle introduction</a></li>\\n<li><a href=https://github.com/petercorke/spatialmath-python/blob/master/spatialmath/introduction.ipynb>deeper introduction</a></li>\\n</ul>\\n<p>You can browse it statically through the links above, or clone the toolbox and run them interactively using <a href=\\\"https://jupyter.org\\\">Jupyter</a> or <a href=\\\"https://jupyter.org\\\">JupyterLab</a>.</p>\\n<h2>Low-level spatial math</h2>\\n<p>Import the low-level transform functions</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; import spatialmath.base as tr\\n</code></pre>\\n<p>We can create a 3D rotation matrix</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; tr.rotx(0.3)\\narray([[ 1.        ,  0.        ,  0.        ],\\n       [ 0.        ,  0.95533649, -0.29552021],\\n       [ 0.        ,  0.29552021,  0.95533649]])\\n\\n&gt;&gt;&gt; tr.rotx(30, unit='deg')\\narray([[ 1.       ,  0.       ,  0.       ],\\n       [ 0.       ,  0.8660254, -0.5      ],\\n       [ 0.       ,  0.5      ,  0.8660254]])\\n</code></pre>\\n<p>The results are <code class=\\\"language-none\\\">numpy</code> arrays so to perform matrix multiplication you need to use the <code class=\\\"language-none\\\">@</code> operator, for example</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">rotx(0.3) @ roty(0.2)\\n</code></pre>\\n<p>We also support multiple ways of passing vector information to functions that require it:</p>\\n<ul>\\n<li>as separate positional arguments</li>\\n</ul>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">transl2(1, 2)\\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n</code></pre>\\n<ul>\\n<li>as a list or a tuple</li>\\n</ul>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">transl2( [1,2] )\\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n\\ntransl2( (1,2) )\\nOut[444]: \\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n</code></pre>\\n<ul>\\n<li>or as a <code class=\\\"language-none\\\">numpy</code> array</li>\\n</ul>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">transl2( np.array([1,2]) )\\nOut[445]: \\narray([[1., 0., 1.],\\n       [0., 1., 2.],\\n       [0., 0., 1.]])\\n</code></pre>\\n<p>There is a single module that deals with quaternions, unit or not, and the representation is a <code class=\\\"language-none\\\">numpy</code> array of four elements.  As above, functions can accept the <code class=\\\"language-none\\\">numpy</code> array, a list, dict or <code class=\\\"language-none\\\">numpy</code> row or column vectors.</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">&gt;&gt;&gt; from spatialmath.base.quaternion import *\\n&gt;&gt;&gt; q = qqmul([1,2,3,4], [5,6,7,8])\\n&gt;&gt;&gt; q\\narray([-60,  12,  30,  24])\\n&gt;&gt;&gt; qprint(q)\\n-60.000000 &lt; 12.000000, 30.000000, 24.000000 &gt;\\n&gt;&gt;&gt; qnorm(q)\\n72.24956747275377\\n</code></pre>\\n<h2>Graphics</h2>\\n<p><img src=https://github.com/petercorke/spatialmath-python/raw/master/docs/figs/transforms3d.png alt=\\\"trplot\\\"></p>\\n<p>The functions support various plotting styles</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">trplot( transl(1,2,3), frame='A', rviz=True, width=1, dims=[0, 10, 0, 10, 0, 10])\\ntrplot( transl(3,1, 2), color='red', width=3, frame='B')\\ntrplot( transl(4, 3, 1)@trotx(math.pi/3), color='green', frame='c', dims=[0,4,0,4,0,4])\\n</code></pre>\\n<p>Animation is straightforward</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">tranimate(transl(4, 3, 4)@trotx(2)@troty(-2), frame=' arrow=False, dims=[0, 5], nframes=200)\\n</code></pre>\\n<p>and it can be saved to a file by</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">tranimate(transl(4, 3, 4)@trotx(2)@troty(-2), frame=' arrow=False, dims=[0, 5], nframes=200, movie='out.mp4')\\n</code></pre>\\n<p><video autoplay loop poster=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.jpg\\\"><source src=\\\"/_next/static/gifs/f53aa66b328813113b38f087b50da80f.webm\\\" type=\\\"video/webm\\\"/></video></p>\\n<p>At the moment we can only save as an MP4, but the following incantation will covert that to an animated GIF for embedding in web pages</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">ffmpeg -i out -r 20 -vf &quot;fps=10,scale=640:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse&quot; out.gif\\n</code></pre>\\n<h2>Symbolic support</h2>\\n<p>Some functions have support for symbolic variables, for example</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">import sympy\\n\\ntheta = sym.symbols('theta')\\nprint(rotx(theta))\\n[[1 0 0]\\n [0 cos(theta) -sin(theta)]\\n [0 sin(theta) cos(theta)]]\\n</code></pre>\\n<p>The resulting <code class=\\\"language-none\\\">numpy</code> array is an array of symbolic objects not numbers – the constants are also symbolic objects.  You can read the elements of the matrix</p>\\n<pre class=\\\"language-none\\\"><code class=\\\"language-none\\\">a = T[0,0]\\n\\na\\nOut[258]: 1\\n\\ntype(a)\\nOut[259]: int\\n\\na = T[1,1]\\na\\nOut[256]: \\ncos(theta)\\ntype(a)\\nOut[255]: cos\\n</code></pre>\\n<p>We see that the symbolic constants are converted back to Python numeric types on read.</p>\\n<p>Similarly when we assign an element or slice of the symbolic matrix to a numeric value, they are converted to symbolic constants on the way in.</p>\\n\",\"name\":\"Spatialmath Python\",\"type\":\"code\",\"url\":\"https://github.com/petercorke/spatialmath-python\",\"image\":\"/_next/static/images/CartesianSnakes_LogoW-292d336acf7d3ffebbf1da8f9f6ccc9d.png\",\"image_fit\":\"contain\",\"src\":\"/content/robotics_toolbox/spatialmath-python.md\",\"id\":\"spatialmath-python\",\"image_position\":\"center\"},{\"content\":\"<h1>Robotics Toolbox for Python</h1>\\n<p><a href=\\\"https://badge.fury.io/py/roboticstoolbox-python\\\"><img src=\\\"https://badge.fury.io/py/roboticstoolbox-python.svg\\\" alt=\\\"PyPI version\\\"></a>\\n<img src=\\\"https://img.shields.io/pypi/pyversions/roboticstoolbox-python.svg\\\" alt=\\\"PyPI - Python Version\\\">\\n<a href=\\\"https://opensource.org/licenses/MIT\\\"><img src=\\\"https://img.shields.io/badge/License-MIT-yellow.svg\\\" alt=\\\"License: MIT\\\"></a>\\n<a href=\\\"https://mybinder.org/v2/gh/petercorke/robotics-toolbox-python/master?filepath=notebooks\\\"><img src=\\\"https://mybinder.org/badge_logo.svg\\\" alt=\\\"Binder\\\"></a>\\n<a href=\\\"https://qcr.github.io\\\"><img src=https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg alt=\\\"QUT Centre for Robotics Open Source\\\"></a></p>\\n<p><a href=https://github.com/petercorke/robotics-toolbox-python/actions?query=workflow%3Abuild><img src=https://github.com/petercorke/robotics-toolbox-python/workflows/build/badge.svg?branch=master alt=\\\"Build Status\\\"></a>\\n<a href=\\\"https://codecov.io/gh/petercorke/robotics-toolbox-python\\\"><img src=\\\"https://codecov.io/gh/petercorke/robotics-toolbox-python/branch/master/graph/badge.svg\\\" alt=\\\"Coverage\\\"></a>\\n<a href=\\\"https://lgtm.com/projects/g/petercorke/robotics-toolbox-python/context:python\\\"><img src=\\\"https://img.shields.io/lgtm/grade/python/g/petercorke/robotics-toolbox-python.svg?logo=lgtm&amp;logoWidth=18\\\" alt=\\\"Language grade: Python\\\"></a>\\n<a href=\\\"https://pypistats.org/packages/roboticstoolbox-python\\\"><img src=\\\"https://img.shields.io/pypi/dw/roboticstoolbox-python\\\" alt=\\\"PyPI - Downloads\\\"></a></p>\\n<table style=\\\"border:0px\\\">\\n<tr style=\\\"border:0px\\\">\\n<td style=\\\"border:0px\\\">\\n<img src=https://github.com/petercorke/robotics-toolbox-python/raw/master/docs/figs/RobToolBox_RoundLogoB.png width=\\\"200\\\"></td>\\n<td style=\\\"border:0px\\\">\\nA Python implementation of the <a href=\\\"https://github.com/petercorke/robotics-toolbox-matlab\\\">Robotics Toolbox for MATLAB<sup>&reg;</sup></a>\\n<ul>\\n<li><a href=\\\"https://github.com/petercorke/robotics-toolbox-python\\\">GitHub repository </a></li>\\n<li><a href=\\\"https://petercorke.github.io/robotics-toolbox-python\\\">Documentation</a></li>\\n<li><a href=\\\"https://github.com/petercorke/robotics-toolbox-python/wiki\\\">Examples and details</a></li>\\n</ul>\\n</td>\\n</tr>\\n</table>\\n<h2>Synopsis</h2>\\n<p>This toolbox brings robotics-specific functionality to Python, and leverages\\nPython's advantages of portability, ubiquity and support, and the capability of\\nthe open-source ecosystem for linear algebra (numpy, scipy),  graphics\\n(matplotlib, three.js, WebGL), interactive development (jupyter, jupyterlab,\\nmybinder.org), and documentation (sphinx).</p>\\n<p>The Toolbox provides tools for representing the kinematics and dynamics of\\nserial-link manipulators  - you can easily create your own in Denavit-Hartenberg\\nform, import a URDF file, or use over 30 supplied models for well-known\\ncontemporary robots from Franka-Emika, Kinova, Universal Robotics, Rethink as\\nwell as classical robots such as the Puma 560 and the Stanford arm.</p>\\n<p>The toolbox will also support mobile robots with functions for robot motion models\\n(unicycle, bicycle), path planning algorithms (bug, distance transform, D*,\\nPRM), kinodynamic planning (lattice, RRT), localization (EKF, particle filter),\\nmap building (EKF) and simultaneous localization and mapping (EKF).</p>\\n<p>The Toolbox provides:</p>\\n<ul>\\n<li>code that is mature and provides a point of comparison for other\\nimplementations of the same algorithms;</li>\\n<li>routines which are generally written in a straightforward manner which\\nallows for easy understanding, perhaps at the expense of computational\\nefficiency;</li>\\n<li>source code which can be read for learning and teaching;</li>\\n<li>backward compatability with the Robotics Toolbox for MATLAB</li>\\n</ul>\\n<p>The Toolbox leverages the <a href=https://github.com/petercorke/spatialmath-python>Spatial Maths Toolbox for Python</a> to\\nprovide support for data types such as SO(n) and SE(n) matrices, quaternions, twists and spatial vectors.</p>\\n<h2>Code Example</h2>\\n<p>We will load a model of the Franka-Emika Panda robot defined classically using\\nmodified (Craig's convention) Denavit-Hartenberg notation</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> roboticstoolbox <span class=\\\"token keyword\\\">as</span> rtb\\nrobot <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">.</span>DH<span class=\\\"token punctuation\\\">.</span>Panda<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>robot<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t┏━━━━━━━━┳━━━━━━━━┳━━━━━┳━━━━━━━┳━━━━━━━━━┳━━━━━━━━┓\\n\\t┃ aⱼ₋₁   ┃  ⍺ⱼ₋₁  ┃ θⱼ  ┃  dⱼ   ┃   q⁻    ┃   q⁺   ┃\\n\\t┣━━━━━━━━╋━━━━━━━━╋━━━━━╋━━━━━━━╋━━━━━━━━━╋━━━━━━━━┫\\n\\t┃    <span class=\\\"token number\\\">0.0</span> ┃   <span class=\\\"token number\\\">0.0</span>° ┃  q1 ┃ <span class=\\\"token number\\\">0.333</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">166.0</span>° ┃ <span class=\\\"token number\\\">166.0</span>° ┃\\n\\t┃    <span class=\\\"token number\\\">0.0</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">90.0</span>° ┃  q2 ┃   <span class=\\\"token number\\\">0.0</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">101.0</span>° ┃ <span class=\\\"token number\\\">101.0</span>° ┃\\n\\t┃    <span class=\\\"token number\\\">0.0</span> ┃  <span class=\\\"token number\\\">90.0</span>° ┃  q3 ┃ <span class=\\\"token number\\\">0.316</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">166.0</span>° ┃ <span class=\\\"token number\\\">166.0</span>° ┃\\n\\t┃ <span class=\\\"token number\\\">0.0825</span> ┃  <span class=\\\"token number\\\">90.0</span>° ┃  q4 ┃   <span class=\\\"token number\\\">0.0</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">176.0</span>° ┃  <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">4.0</span>° ┃\\n\\t┃<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.0825</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">90.0</span>° ┃  q5 ┃ <span class=\\\"token number\\\">0.384</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">166.0</span>° ┃ <span class=\\\"token number\\\">166.0</span>° ┃\\n\\t┃    <span class=\\\"token number\\\">0.0</span> ┃  <span class=\\\"token number\\\">90.0</span>° ┃  q6 ┃   <span class=\\\"token number\\\">0.0</span> ┃   <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1.0</span>° ┃ <span class=\\\"token number\\\">215.0</span>° ┃\\n\\t┃  <span class=\\\"token number\\\">0.088</span> ┃  <span class=\\\"token number\\\">90.0</span>° ┃  q7 ┃ <span class=\\\"token number\\\">0.107</span> ┃ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">166.0</span>° ┃ <span class=\\\"token number\\\">166.0</span>° ┃\\n\\t┗━━━━━━━━┻━━━━━━━━┻━━━━━┻━━━━━━━┻━━━━━━━━━┻━━━━━━━━┛\\n\\t\\n\\t┌─────┬───────────────────────────────────────┐\\n\\t│tool │ t <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.1</span><span class=\\\"token punctuation\\\">;</span> rpy<span class=\\\"token operator\\\">/</span>xyz <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">45</span>°<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span>°<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span>° │\\n\\t└─────┴───────────────────────────────────────┘\\n\\t\\n\\t┌─────┬─────┬────────┬─────┬───────┬─────┬───────┬──────┐\\n\\t│name │ q0  │ q1     │ q2  │ q3    │ q4  │ q5    │ q6   │\\n\\t├─────┼─────┼────────┼─────┼───────┼─────┼───────┼──────┤\\n\\t│  qz │  <span class=\\\"token number\\\">0</span>° │  <span class=\\\"token number\\\">0</span>°    │  <span class=\\\"token number\\\">0</span>° │  <span class=\\\"token number\\\">0</span>°   │  <span class=\\\"token number\\\">0</span>° │  <span class=\\\"token number\\\">0</span>°   │  <span class=\\\"token number\\\">0</span>°  │\\n\\t│  qr │  <span class=\\\"token number\\\">0</span>° │ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">17.2</span>° │  <span class=\\\"token number\\\">0</span>° │ <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">126</span>° │  <span class=\\\"token number\\\">0</span>° │  <span class=\\\"token number\\\">115</span>° │  <span class=\\\"token number\\\">45</span>° │\\n\\t└─────┴─────┴────────┴─────┴───────┴─────┴───────┴──────┘\\n\\nT <span class=\\\"token operator\\\">=</span> robot<span class=\\\"token punctuation\\\">.</span>fkine<span class=\\\"token punctuation\\\">(</span>robot<span class=\\\"token punctuation\\\">.</span>qz<span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\"># forward kinematics</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span>\\n\\n\\t   <span class=\\\"token number\\\">0.707107</span>    <span class=\\\"token number\\\">0.707107</span>    <span class=\\\"token number\\\">0</span>           <span class=\\\"token number\\\">0.088</span>        \\n\\t   <span class=\\\"token number\\\">0.707107</span>   <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.707107</span>    <span class=\\\"token number\\\">0</span>           <span class=\\\"token number\\\">0</span>            \\n\\t   <span class=\\\"token number\\\">0</span>           <span class=\\\"token number\\\">0</span>          <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>           <span class=\\\"token number\\\">0.823</span>        \\n\\t   <span class=\\\"token number\\\">0</span>           <span class=\\\"token number\\\">0</span>           <span class=\\\"token number\\\">0</span>           <span class=\\\"token number\\\">1</span>          \\n</code></pre>\\n<p>(Python prompts are not shown to make it easy to copy+paste the code, console output is indented)</p>\\n<p>We can solve inverse kinematics very easily.  We first choose an SE(3) pose\\ndefined in terms of position and orientation (end-effector z-axis down (A=-Z) and finger\\norientation parallel to y-axis (O=+Y)).</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> spatialmath <span class=\\\"token keyword\\\">import</span> SE3\\n\\nT <span class=\\\"token operator\\\">=</span> SE3<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.8</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0.1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> SE3<span class=\\\"token punctuation\\\">.</span>OA<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nsol <span class=\\\"token operator\\\">=</span> robot<span class=\\\"token punctuation\\\">.</span>ikine_min<span class=\\\"token punctuation\\\">(</span>T<span class=\\\"token punctuation\\\">)</span>         <span class=\\\"token comment\\\"># solve IK</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>sol<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">)</span>                     <span class=\\\"token comment\\\"># display joint angles</span>\\n\\n\\t<span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.01044</span>    <span class=\\\"token number\\\">7.876</span>    <span class=\\\"token number\\\">1.557</span>    <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">6.81</span>    <span class=\\\"token number\\\">1.571</span>    <span class=\\\"token number\\\">4.686</span>   <span class=\\\"token number\\\">0.5169</span><span class=\\\"token punctuation\\\">]</span>\\n\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>robot<span class=\\\"token punctuation\\\">.</span>fkine<span class=\\\"token punctuation\\\">(</span>sol<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>    <span class=\\\"token comment\\\"># FK shows that desired end-effector pose was achieved</span>\\n\\n\\tOut<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">35</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> \\n\\tSE3<span class=\\\"token punctuation\\\">:</span>┏                                           ┓\\n\\t\\t┃<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>         <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">4e</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">08</span>      <span class=\\\"token number\\\">0.000521</span>   <span class=\\\"token number\\\">0.615</span>    ┃\\n\\t\\t┃ <span class=\\\"token number\\\">2.79e-08</span>   <span class=\\\"token number\\\">1</span>          <span class=\\\"token number\\\">0.00013</span>    <span class=\\\"token number\\\">0.154</span>    ┃\\n\\t\\t┃<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.000521</span>   <span class=\\\"token number\\\">0.00013</span>   <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span>          <span class=\\\"token number\\\">0.105</span>    ┃\\n\\t\\t┃ <span class=\\\"token number\\\">0</span>          <span class=\\\"token number\\\">0</span>          <span class=\\\"token number\\\">0</span>          <span class=\\\"token number\\\">1</span>        ┃\\n\\t\\t┗                                           ┛\\n</code></pre>\\n<p>Note that because this robot is redundant we don't have any control over the arm configuration apart from end-effector pose, ie. we can't control the elbow height.</p>\\n<p>We can animate a path from the upright <code class=\\\"language-none\\\">qz</code> configuration to this pickup configuration</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">qt <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>trajectory<span class=\\\"token punctuation\\\">.</span>jtraj<span class=\\\"token punctuation\\\">(</span>robot<span class=\\\"token punctuation\\\">.</span>qz<span class=\\\"token punctuation\\\">,</span> q_pickup<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span>\\nrobot<span class=\\\"token punctuation\\\">.</span>plot<span class=\\\"token punctuation\\\">(</span>qt<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">,</span> movie<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'panda1.gif'</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p><video autoplay loop poster=\\\"/_next/static/gifs/826a58e84a13c9100ba2527f636dc267.jpg\\\"><source src=\\\"/_next/static/gifs/826a58e84a13c9100ba2527f636dc267.webm\\\" type=\\\"video/webm\\\"/></video></p>\\n<p>which uses the default matplotlib backend.  Grey arrows show the joint axes and the colored frame shows the end-effector pose.</p>\\n<p>Let's now load a URDF model of the same robot. The kinematic representation is no longer\\nbased on Denavit-Hartenberg parameters, it is now a rigid-body tree.</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">robot <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">.</span>URDF<span class=\\\"token punctuation\\\">.</span>Panda<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\"># load URDF version of the Panda</span>\\n<span class=\\\"token keyword\\\">print</span><span class=\\\"token punctuation\\\">(</span>robot<span class=\\\"token punctuation\\\">)</span>    <span class=\\\"token comment\\\"># display the model</span>\\n\\n\\t┌───┬──────────────┬─────────────┬──────────────┬─────────────────────────────────────────────┐\\n\\t│<span class=\\\"token builtin\\\">id</span> │     link     │   parent    │    joint     │                     ETS                     │\\n\\t├───┼──────────────┼─────────────┼──────────────┼─────────────────────────────────────────────┤\\n\\t│ <span class=\\\"token number\\\">0</span> │  panda_link0 │           <span class=\\\"token operator\\\">-</span> │              │                                             │\\n\\t│ <span class=\\\"token number\\\">1</span> │  panda_link1 │ panda_link0 │ panda_joint1 │                          tz<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.333</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q0<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">2</span> │  panda_link2 │ panda_link1 │ panda_joint2 │                           Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">90</span>°<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q1<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">3</span> │  panda_link3 │ panda_link2 │ panda_joint3 │               ty<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.316</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">90</span>°<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q2<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">4</span> │  panda_link4 │ panda_link3 │ panda_joint4 │               tx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.0825</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">90</span>°<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q3<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">5</span> │  panda_link5 │ panda_link4 │ panda_joint5 │ tx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">0.0825</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> ty<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.384</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">90</span>°<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q4<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">6</span> │  panda_link6 │ panda_link5 │ panda_joint6 │                            Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">90</span>°<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q5<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">7</span> │  panda_link7 │ panda_link6 │ panda_joint7 │                tx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.088</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">90</span>°<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> Rz<span class=\\\"token punctuation\\\">(</span>q6<span class=\\\"token punctuation\\\">)</span> │\\n\\t│ <span class=\\\"token number\\\">8</span> │ @panda_link8 │ panda_link7 │ panda_joint8 │                                   tz<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.107</span><span class=\\\"token punctuation\\\">)</span> │\\n\\t└───┴──────────────┴─────────────┴──────────────┴─────────────────────────────────────────────┘\\n</code></pre>\\n<p>The symbol <code class=\\\"language-none\\\">@</code> indicates the link as an end-effector, a leaf node in the rigid-body\\ntree.</p>\\n<p>We can instantiate our robot inside a browser-based 3d-simulation environment.</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\">env <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>backends<span class=\\\"token punctuation\\\">.</span>Swift<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\"># instantiate 3D browser-based visualizer</span>\\nenv<span class=\\\"token punctuation\\\">.</span>launch<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>                <span class=\\\"token comment\\\"># activate it</span>\\nenv<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>robot<span class=\\\"token punctuation\\\">)</span>              <span class=\\\"token comment\\\"># add robot to the 3D scene</span>\\n<span class=\\\"token keyword\\\">for</span> qk <span class=\\\"token keyword\\\">in</span> qt<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">:</span>             <span class=\\\"token comment\\\"># for each joint configuration on trajectory</span>\\n      robot<span class=\\\"token punctuation\\\">.</span>q <span class=\\\"token operator\\\">=</span> qk          <span class=\\\"token comment\\\"># update the robot state</span>\\n      env<span class=\\\"token punctuation\\\">.</span>step<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>            <span class=\\\"token comment\\\"># update visualization</span>\\n</code></pre>\\n<p align=\\\"center\\\">\\n <img src=\\\"/_next/static/gifs/d064326b92f5b2c4e0c25c057731e6a7.gif\\\">\\n</p>\\n<h1>Getting going</h1>\\n<h2>Installing</h2>\\n<p>You will need Python &gt;= 3.6</p>\\n<h3>Using pip</h3>\\n<p>Install a snapshot from PyPI</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pip3 <span class=\\\"token function\\\">install</span> roboticstoolbox-python\\n</code></pre>\\n<p>Available options are:</p>\\n<ul>\\n<li><code class=\\\"language-none\\\">vpython</code> install <a href=\\\"https://vpython.org\\\">VPython</a> backend</li>\\n<li><code class=\\\"language-none\\\">collision</code> install collision checking with <a href=\\\"https://pybullet.org\\\">pybullet</a></li>\\n</ul>\\n<p>Put the options in a comma separated list like</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pip3 <span class=\\\"token function\\\">install</span> roboticstoolbox-python<span class=\\\"token punctuation\\\">[</span>optionlist<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n<p><a href=https://github.com/jhavl/swift>Swift</a>, a web-based visualizer, is\\ninstalled as part of Robotics Toolbox.</p>\\n<h3>From GitHub</h3>\\n<p>To install the bleeding-edge version from GitHub</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\"><span class=\\\"token function\\\">git</span> clone https://github.com/petercorke/robotics-toolbox-python.git\\n<span class=\\\"token builtin class-name\\\">cd</span> robotics-toolbox-python\\npip3 <span class=\\\"token function\\\">install</span> -e <span class=\\\"token builtin class-name\\\">.</span>\\n</code></pre>\\n<h2>Run some examples</h2>\\n<p>The <a href=https://github.com/petercorke/robotics-toolbox-python/tree/master/notebooks><code class=\\\"language-none\\\">notebooks</code></a> folder contains some tutorial Jupyter notebooks which you can browse on GitHub.</p>\\n<p>Or you can run them, and experiment with them, at <a href=\\\"https://mybinder.org/v2/gh/petercorke/robotics-toolbox-python/master?filepath=notebooks\\\">mybinder.org</a>.</p>\\n<h2>Toolbox Research Applications</h2>\\n<p>The toolbox is incredibly useful for developing and prototyping algorithms for research, thanks to the exhaustive set of well documented and mature robotic functions exposed through clean and painless APIs. Additionally, the ease at which a user can visualize their algorithm supports a rapid prototyping paradigm.</p>\\n<h3>Publication List</h3>\\n<p>J. Haviland and P. Corke, &quot;<strong>NEO: A Novel Expeditious Optimisation Algorithm for Reactive Motion Control of Manipulators</strong>,&quot; in <em>IEEE Robotics and Automation Letters</em>, doi: 10.1109/LRA.2021.3056060. In the video, the robot is controlled using the Robotics toolbox for Python and features a recording from the <a href=https://github.com/jhavl/swift>Swift</a> Simulator.</p>\\n<p>[<a href=\\\"https://arxiv.org/abs/2010.08686\\\">Arxiv Paper</a>] [<a href=\\\"https://ieeexplore.ieee.org/document/9343718\\\">IEEE Xplore</a>] [<a href=\\\"https://jhavl.github.io/neo/\\\">Project Website</a>] [<a href=\\\"https://youtu.be/jSLPJBr8QTY\\\">Video</a>] [<a href=https://github.com/petercorke/robotics-toolbox-python/blob/master/examples/neo.py>Code Example</a>]</p>\\n<p>\\n  <a href=\\\"https://youtu.be/jSLPJBr8QTY\\\">\\n    <img src=https://github.com/petercorke/robotics-toolbox-python/raw/master/docs/figs/neo_youtube.png width=\\\"560\\\">\\n  </a>\\n</p>\\n<p><strong>A Purely-Reactive Manipulability-Maximising Motion Controller</strong>, J. Haviland and P. Corke. In the video, the robot is controlled using the Robotics toolbox for Python.</p>\\n<p>[<a href=\\\"https://arxiv.org/abs/2002.11901\\\">Paper</a>] [<a href=\\\"https://jhavl.github.io/mmc/\\\">Project Website</a>] [<a href=\\\"https://youtu.be/Vu_rcPlaADI\\\">Video</a>] [<a href=https://github.com/petercorke/robotics-toolbox-python/blob/master/examples/mmc.py>Code Example</a>]</p>\\n<p>\\n  <a href=\\\"https://youtu.be/Vu_rcPlaADI\\\">\\n    <img src=https://github.com/petercorke/robotics-toolbox-python/raw/master/docs/figs/mmc_youtube.png width=\\\"560\\\">\\n  </a>\\n</p>\\n<br>\\n\",\"name\":\"Robotics Toolbox Python\",\"type\":\"code\",\"url\":\"https://github.com/petercorke/robotics-toolbox-python\",\"image\":\"/_next/static/images/RobToolBox_RoundLogoB-9563d226662903b6e404b809e72e3235.png\",\"image_fit\":\"contain\",\"src\":\"/content/robotics_toolbox/robotics-toolbox-python.md\",\"id\":\"robotics-toolbox-python\",\"image_position\":\"center\"},{\"content\":\"<h1>Swift</h1>\\n<p><a href=\\\"https://badge.fury.io/py/swift-sim\\\"><img src=\\\"https://badge.fury.io/py/swift-sim.svg\\\" alt=\\\"PyPI version\\\"></a>\\n<a href=\\\"https://img.shields.io/pypi/pyversions/swift-sim\\\"><img src=\\\"https://img.shields.io/pypi/pyversions/swift-sim\\\" alt=\\\"PyPI - Python Version\\\"></a>\\n<a href=\\\"https://opensource.org/licenses/MIT\\\"><img src=\\\"https://img.shields.io/badge/License-MIT-yellow.svg\\\" alt=\\\"License: MIT\\\"></a>\\n<a href=\\\"https://qcr.github.io\\\"><img src=https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg alt=\\\"QUT Centre for Robotics Open Source\\\"></a></p>\\n<p>Swift is a light-weight browser-based simulator built on top of the <a href=https://github.com/petercorke/robotics-toolbox-python>Robotics Toolbox for Python</a>. This simulator provides robotics-specific functionality for rapid prototyping of algorithms, research, and education. Built using Python and Javascript, Swift is cross-platform (Linux, MacOS, and Windows) while also leveraging the ubiquity and support of these languages.</p>\\n<p>Through the <a href=https://github.com/petercorke/robotics-toolbox-python>Robotics Toolbox for Python</a>, Swift can visualise over 30 supplied robot models: well-known contemporary robots from Franka-Emika, Kinova, Universal Robotics, Rethink as well as classical robots such as the Puma 560 and the Stanford arm. Swift is under development and will support mobile robots in the future.</p>\\n<p>Swift provides:</p>\\n<ul>\\n<li>visualisation of mesh objects (Collada and STL files) and primitive shapes;</li>\\n<li>robot visualisation and simulation;</li>\\n<li>recording and saving a video of the simulation;</li>\\n<li>source code which can be read for learning and teaching;</li>\\n</ul>\\n<h2>Installing</h2>\\n<h3>Using pip</h3>\\n<p>Swift is designed to be controlled through the <a href=https://github.com/petercorke/robotics-toolbox-python>Robotics Toolbox for Python</a>. By installing the toolbox through PyPI, swift is installed as a dependency</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pip3 <span class=\\\"token function\\\">install</span> roboticstoolbox-python\\n</code></pre>\\n<p>Otherwise, Swift can be install by</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pip3 <span class=\\\"token function\\\">install</span> swift-sim\\n</code></pre>\\n<h3>From GitHub</h3>\\n<p>To install the latest version from GitHub</p>\\n<pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\"><span class=\\\"token function\\\">git</span> clone https://github.com/jhavl/swift.git\\n<span class=\\\"token builtin class-name\\\">cd</span> swift\\npip3 <span class=\\\"token function\\\">install</span> -e <span class=\\\"token builtin class-name\\\">.</span>\\n</code></pre>\\n<h2>Code Examples</h2>\\n<h3>Robot Plot</h3>\\n<p>We will load a model of the Franka-Emika Panda robot and plot it. We set the joint angles of the robot into the ready joint configuration qr.</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> roboticstoolbox <span class=\\\"token keyword\\\">as</span> rp\\n\\npanda <span class=\\\"token operator\\\">=</span> rp<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">.</span>Panda<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\npanda<span class=\\\"token punctuation\\\">.</span>plot<span class=\\\"token punctuation\\\">(</span>q<span class=\\\"token operator\\\">=</span>panda<span class=\\\"token punctuation\\\">.</span>qr<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p align=\\\"center\\\">\\n <img src=https://github.com/jhavl/swift/blob/master/.github/figures/panda.png>\\n</p>\\n<h3>Resolved-Rate Motion Control</h3>\\n<p>We will load a model of the Franka-Emika Panda robot and make it travel towards a goal pose defined by the variable Tep.</p>\\n<pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">import</span> roboticstoolbox <span class=\\\"token keyword\\\">as</span> rtb\\n<span class=\\\"token keyword\\\">import</span> spatialmath <span class=\\\"token keyword\\\">as</span> sm\\n<span class=\\\"token keyword\\\">import</span> numpy <span class=\\\"token keyword\\\">as</span> np\\n\\n<span class=\\\"token comment\\\"># Make and instance of the Swift simulator and open it</span>\\nenv <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>backends<span class=\\\"token punctuation\\\">.</span>Swift<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nenv<span class=\\\"token punctuation\\\">.</span>launch<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Make a panda model and set its joint angles to the ready joint configuration</span>\\npanda <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">.</span>Panda<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\npanda<span class=\\\"token punctuation\\\">.</span>q <span class=\\\"token operator\\\">=</span> panda<span class=\\\"token punctuation\\\">.</span>qr\\n\\n<span class=\\\"token comment\\\"># Set a desired and effector pose an an offset from the current end-effector pose</span>\\nTep <span class=\\\"token operator\\\">=</span> panda<span class=\\\"token punctuation\\\">.</span>fkine<span class=\\\"token punctuation\\\">(</span>panda<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sm<span class=\\\"token punctuation\\\">.</span>SE3<span class=\\\"token punctuation\\\">.</span>Tx<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sm<span class=\\\"token punctuation\\\">.</span>SE3<span class=\\\"token punctuation\\\">.</span>Ty<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> sm<span class=\\\"token punctuation\\\">.</span>SE3<span class=\\\"token punctuation\\\">.</span>Tz<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.45</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Add the robot to the simulator</span>\\nenv<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">(</span>panda<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Simulate the robot while it has not arrived at the goal</span>\\narrived <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">False</span>\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token keyword\\\">not</span> arrived<span class=\\\"token punctuation\\\">:</span>\\n\\n    <span class=\\\"token comment\\\"># Work out the required end-effector velocity to go towards the goal</span>\\n    v<span class=\\\"token punctuation\\\">,</span> arrived <span class=\\\"token operator\\\">=</span> rtb<span class=\\\"token punctuation\\\">.</span>p_servo<span class=\\\"token punctuation\\\">(</span>panda<span class=\\\"token punctuation\\\">.</span>fkine<span class=\\\"token punctuation\\\">(</span>panda<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> Tep<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    \\n    <span class=\\\"token comment\\\"># Set the Panda's joint velocities</span>\\n    panda<span class=\\\"token punctuation\\\">.</span>qd <span class=\\\"token operator\\\">=</span> np<span class=\\\"token punctuation\\\">.</span>linalg<span class=\\\"token punctuation\\\">.</span>pinv<span class=\\\"token punctuation\\\">(</span>panda<span class=\\\"token punctuation\\\">.</span>jacobe<span class=\\\"token punctuation\\\">(</span>panda<span class=\\\"token punctuation\\\">.</span>q<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> @ v\\n    \\n    <span class=\\\"token comment\\\"># Step the simulator by 50 milliseconds</span>\\n    env<span class=\\\"token punctuation\\\">.</span>step<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.05</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n<p align=\\\"center\\\">\\n <img src=\\\"/_next/static/gifs/0c7102b6a6bab096effb4fed9f4ba2e5.gif\\\">\\n</p>\\n\",\"name\":\"Swift\",\"type\":\"code\",\"url\":\"https://github.com/jhavl/swift\",\"image\":\"/_next/static/images/panda-08fefd194b35f7baa2af3c22759caa53.png\",\"src\":\"/content/robotics_toolbox/swift.md\",\"id\":\"swift\",\"image_position\":\"center\"}],\"feature\":2,\"src\":\"/content/robotics_toolbox/collection.md\",\"image_position\":\"center\"}"},"__N_SSG":true}